1 import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('data.csv')

print(df.isnull().sum())

df = df.dropna()

sns.boxplot(x=df['column_name'])

mean = df['column_name'].mean()
median = df['column_name'].median()
mode = df['column_name'].mode().values[0]
min_value = df['column_name'].min()
max_value = df['column_name'].max()
std_deviation = df['column_name'].std()

print('Mean:', mean)
print('Median:', median)
print('Mode:', mode)
print('Minimum value:', min_value)
print('Maximum value:', max_value)
print('Standard deviation:', std_deviation)

lower_bound = mean - 3 * std_deviation
upper_bound = mean + 3 * std_deviation
df = df[(df['column_name'] > lower_bound) & (df['column_name'] < upper_bound)]

print(df.head())
2
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

sample = np.random.normal(loc=10, scale=2, size=1000)

plt.hist(sample, bins=30, density=True, alpha=0.5)

x = np.linspace(-5, 25, 1000)
pdf = norm.pdf(x, loc=10, scale=2)
plt.plot(x, pdf, 'r-', lw=2)

mean = np.mean(sample)
std_deviation = np.std(sample)

print('Mean:', mean)
print('Standard deviation:', std_deviation)

plt.show()

3 
import numpy as np

data = np.array([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])

mean = np.mean(data)
std_deviation = np.std(data)

threshold = 3 * std_deviation

outliers = [x for x in data if abs(x - mean) > threshold]

print('Outliers:', outliers)

4
import numpy as np

# Generate a sample dataset
data = np.array([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])

# Calculate the mean and standard deviation of the dataset
mean = np.mean(data)
std_deviation = np.std(data)

# Define a threshold to identify outliers (e.g. three standard deviations from the mean)
threshold = 3 * std_deviation

# Remove the outliers
data_without_outliers = [x for x in data if abs(x - mean) <= threshold]

# Print the data without outliers
print('Data without outliers:', data_without_outliers)

5
import numpy as np
import scipy.stats as stats

# Generate a sample dataset
data = np.array([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])

# Calculate the IQR of the dataset
q1 = stats.scoreatpercentile(data, 25)
q3 = stats.scoreatpercentile(data, 75)
iqr = q3 - q1

# Print the IQR
print('Interquartile range (IQR):', iqr)

6
import numpy as np
import scipy.stats as stats

# Generate a sample dataset
data = np.array([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])

# Calculate the IQR of the dataset
q1 = stats.scoreatpercentile(data, 25)
q3 = stats.scoreatpercentile(data, 75)
iqr = q3 - q1

# Calculate the outlier cutoff
cutoff = 1.5 * iqr
lower_cutoff = q1 - cutoff
upper_cutoff = q3 + cutoff

# Print the outlier cutoff
print('Lower outlier cutoff:', lower_cutoff)
print('Upper outlier cutoff:', upper_cutoff)

7
import numpy as np
import scipy.stats as stats

# Generate a sample dataset with some outliers
data = np.array([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 100])

# Calculate the IQR of the dataset
q1 = stats.scoreatpercentile(data, 25)
q3 = stats.scoreatpercentile(data, 75)
iqr = q3 - q1

# Identify the outliers
lower_cutoff = q1 - 1.5 * iqr
upper_cutoff = q3 + 1.5 * iqr
outliers = data[(data < lower_cutoff) | (data > upper_cutoff)]

# Remove the outliers from the dataset
data = data[(data >= lower_cutoff) & (data <= upper_cutoff)]

# Print the results
print('Original data:', data)
print('Identified outliers:', outliers)
print('Data with outliers removed:', data)

8
import numpy as np
from scipy import stats

# Generate a random array of 20 numbers
data = np.random.randint(0, 10, 20)
print("Data:", data)

# Calculate the mean
mean = np.mean(data)
print("Mean:", mean)

# Calculate the median
median = np.median(data)
print("Median:", median)

# Calculate the mode
mode = stats.mode(data)
print("Mode:", mode[0][0])

# Calculate the standard deviation
std_dev = np.std(data)
print("Standard deviation:", std_dev)

9
import numpy as np
from scipy.stats import skew

# Generate a random array of 20 numbers
data = np.random.normal(0, 1, 20)
print("Data:", data)

# Calculate the skewness
skewness = skew(data)
print("Skewness:", skewness)

10
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Generate a random array of 100 numbers
data = np.random.normal(0, 1, 100)

# Plot a histogram of the data
sns.histplot(data, kde=False)
plt.title("Histogram")
plt.xlabel("Value")
plt.ylabel("Frequency")
plt.show()

# Plot a distribution plot of the data
sns.kdeplot(data)
plt.title("Distribution Plot")
plt.xlabel("Value")
plt.ylabel("Density")
plt.show()

11
import numpy as np

def generate_scores():
    # Generate a normally-distributed dataset of student scores
    scores_data = np.random.normal(loc=70, scale=10, size=200)
    return scores_data

# Call the function and store the returned array in the variable scores_data
scores_data = generate_scores()

12
import matplotlib.pyplot as plt

# Generate histogram
plt.hist(scores_data, bins=20, color='lightblue')
plt.xlabel('Score')
plt.ylabel('Frequency')
plt.title('Distribution of Student Scores')
plt.show()

# Generate box plot
plt.boxplot(scores_data, vert=False)
plt.xlabel('Score')
plt.title('Box Plot of Student Scores')
plt.show()

13
import pandas as pd

# Load scores_data into pandas DataFrame
df = pd.DataFrame(scores_data, columns=['Score'])

# Calculate mean and standard deviation
mean_score = df['Score'].mean()
std_score = df['Score'].std()

print('Mean score:', mean_score)
print('Standard deviation of score:', std_score)

14
# Calculate mean and standard deviation
mean_score = df['Score'].mean()
std_score = df['Score'].std()

# Set lower and upper limits
lower_limit = mean_score - 3*std_score
upper_limit = mean_score + 3*std_score

print('Lower limit:', lower_limit)
print('Upper limit:', upper_limit)

15

# Filter data to retain scores within [lower_limit, upper_limit]
df_filtered = df_scores[(df_scores['Score'] >= lower_limit) & (df_scores['Score'] <= upper_limit)]

print('Filtered data:')
print(df_filtered.head())
