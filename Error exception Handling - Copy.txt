1
try:
    # Code that may raise an exception
    x = 1 / 0
except ZeroDivisionError:
    # Code to handle the exception
    print("Error: Division by zero")
finally:
    # Code that is always executed
    print("Done")
2
try:
    # Code that may raise an exception
    x = int("foo")
except ValueError:
    # Code to handle the specific exception (ValueError in this case)
    print("Oops! That was not a valid number.")
3
try:
    # Code that may raise exceptions
    x = 1 / 0
except (ZeroDivisionError, TypeError):
    # Code to handle multiple exceptions
    print("Oops! Something went wrong.")

4
try:
    # Code that may raise an exception
    x = 1 / 0
except ZeroDivisionError:
    # Code to handle the exception
    print("Oops! Division by zero error.")
finally:
    # Code that is always executed
    print("This code will always execute, whether or not an exception was raised.")
5
class MyException(Exception):
    pass
code 2(try:
    # Code that may raise MyException
    raise MyException("Something went wrong.")
except MyException as e:
    # Code to handle the custom exception
    print("Caught custom exception:", e)
6
# Syntax error example
print("Hello, world!'')  # syntax error - unmatched quote

# Exception example
x = 10
y = 0
try:
    result = x / y
except ZeroDivisionError:
    print("Cannot divide by zero")
7
# Example of ImportError
try:
    import nonexistent_module
except ImportError:
    print("Module does not exist")
8
try:
    numerator = int(input("Enter the numerator: "))
    denominator = int(input("Enter the denominator: "))
    if denominator == 0:
        raise ZeroDivisionError("Cannot divide by zero")
    quotient = numerator / denominator
    print(f"The quotient of {numerator}/{denominator} is {quotient}")
except ValueError:
    print("Invalid input. Please enter valid integer values for the numerator and denominator.")
except ZeroDivisionError as e:
    print(e)
9
try:
    numerator = int(input("Enter the numerator: "))
    denominator = int(input("Enter the denominator: "))
    assert denominator != 0, "Cannot divide by zero"
    quotient = numerator / denominator
    print(f"The quotient of {numerator}/{denominator} is {quotient}")
except ValueError:
    print("Invalid input. Please enter valid integer values for the numerator and denominator.")
except AssertionError as e:
    print(e)
10
# Exception Handling
try:
    x = int(input("Enter a number: "))
    y = int(input("Enter another number: "))
    print("Result:", x/y)
except:
    print("An error occurred")

# Throwing an Exception
def check_age(age):
    if age < 18:
        raise ValueError("Age must be greater than or equal to 18")
    else:
        print("You are eligible to vote!")

try:
    check_age(15)
except ValueError as e:
    print(e)

# Catching an Exception
try:
    fruits = ["apple", "banana", "orange"]
    print(fruits[3])
except IndexError:
    print("An index error occurred")
finally:
    print("The program has completed")
